{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"back",
				"backend_formatter	ri::CppformatFormatter"
			],
			[
				"Set",
				"Formatter::SetMessageFormat(const std::string &format)	void"
			],
			[
				"fro",
				"frontend_formatter	ri::CppformatFormatter"
			],
			[
				"Att",
				"AttachWriter(ri::Writer *writer)	void"
			],
			[
				"A",
				"AttachFormatter(ri::Formatter *formatter)	void"
			],
			[
				"Form",
				"FormatConfig	struct"
			],
			[
				"For",
				"FormatConfig	struct"
			],
			[
				"inc",
				"include	#include self"
			],
			[
				"fordf",
				"ford_fulkerson_2"
			],
			[
				"ford",
				"ford_fulkerson_1"
			],
			[
				"init",
				"initial"
			],
			[
				"INT",
				"INFTY"
			],
			[
				"inita",
				"initial"
			],
			[
				"ren",
				"remaining"
			],
			[
				"ini",
				"initial"
			],
			[
				"copy",
				"copy_graph"
			],
			[
				"min",
				"minflow"
			],
			[
				"re",
				"reserve"
			],
			[
				"us",
				"using namespace	using-namespace"
			],
			[
				"for",
				"for	for"
			],
			[
				"pri",
				"printf"
			],
			[
				"fl",
				"flow	int"
			],
			[
				"using",
				"using	using"
			],
			[
				"sta",
				"static	static"
			],
			[
				"INTm",
				"INT_MAX	Macro"
			],
			[
				"INTMAX",
				"INT_MAX	Macro"
			],
			[
				"di",
				"dinic()	void"
			],
			[
				"conti",
				"contain(KeyType key)	bool"
			],
			[
				"push",
				"push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)	void"
			],
			[
				"co",
				"count() const	rep"
			],
			[
				"fr",
				"front() const	const_reference"
			],
			[
				"temp",
				"template	template"
			],
			[
				"unor",
				"unordered_map	constructor"
			],
			[
				"size",
				"size() const	size_type"
			],
			[
				"pus",
				"puts(const char *__s)	int"
			],
			[
				"tot",
				"total_passed"
			],
			[
				"int",
				"input"
			],
			[
				"try",
				"try	Try/Except"
			],
			[
				"pass",
				"passed"
			],
			[
				"time",
				"timelimit"
			],
			[
				"diff",
				"diffarg"
			],
			[
				"dura",
				"duration_cast<class _ToDuration>(const duration<_Rep, _Period> &__fd)	typename enable_if<__is_duration<_ToDuration>::value, _ToDuration>::type"
			],
			[
				"clea",
				"cleanup()	void"
			],
			[
				"glDrawArrays",
				"glDrawArrays(GLenum mode, GLint first, GLsizei count)	void"
			],
			[
				"rein",
				"reinterpret_cast	reinterpret_cast"
			],
			[
				"GLFlo",
				"GL_FLOAT	Macro"
			],
			[
				"glBIndVer",
				"glBindVertexArray	Macro"
			],
			[
				"glDeles",
				"glDeleteShader	Macro"
			],
			[
				"fragmen",
				"fragmentShader	GLuint"
			],
			[
				"info",
				"infoLength"
			],
			[
				"stau",
				"status	GLint"
			],
			[
				"pro",
				"program	GLuint"
			],
			[
				"GLFRAG",
				"GL_FRAGMENT_SHADER	Macro"
			],
			[
				"load",
				"load_shader(GLenum shaderType, const std::string &path)	GLuint"
			],
			[
				"vert",
				"vertexShader	GLuint"
			],
			[
				"De",
				"Debug(const std::string &formatted, const Args &args...)	void"
			],
			[
				"glGetinfo",
				"glGetShaderInfoLog	Macro"
			],
			[
				"GLINFO",
				"GL_INFO_LOG_LENGTH	Macro"
			],
			[
				"constca",
				"const_cast<type>(expression)	KeyWord"
			],
			[
				"getl",
				"getline(basic_istream<_CharT, _Traits> &&__is, basic_string<_CharT, _Traits, _Allocator> &__str)	basic_istream<_CharT, _Traits> &"
			],
			[
				"ostr",
				"ostringstream	Typedef"
			],
			[
				"shad",
				"shaderType	GLenum"
			],
			[
				"GL_COLORB",
				"GL_COLOR_BUFFER_BIT	Macro"
			],
			[
				"sy",
				"keysym	SDL_Keysym"
			],
			[
				"SDLGL_SW",
				"SDL_GL_SwapWindow(SDL_Window *window)	void"
			],
			[
				"SDLE",
				"SDL_Event	Typedef"
			],
			[
				"glViewp",
				"glViewport(GLint x, GLint y, GLsizei width, GLsizei height)	void"
			],
			[
				"glViewpr",
				"glViewportArrayv	Macro"
			],
			[
				"if",
				"if	if"
			],
			[
				"fram",
				"framework.hpp"
			],
			[
				"frea",
				"framework.hpp"
			],
			[
				"ifn",
				"ifndefdefine	#ifndefdefine"
			],
			[
				"SDL_GLcon",
				"SDL_GLContext	Typedef"
			],
			[
				"SDLGLPRO",
				"SDL_GL_CONTEXT_PROFILE_CORE	SDL_GLprofile"
			],
			[
				"SDLGLATTR",
				"SDL_GL_SetAttribute(SDL_GLattr attr, int value)	int"
			],
			[
				"SDLGL_ATTR",
				"SDL_GL_SetAttribute(SDL_GLattr attr, int value)	int"
			],
			[
				"SDLCreawnd",
				"SDL_CreateWindow(const char *title, int x, int y, int w, int h, Uint32 flags)	SDL_Window *"
			],
			[
				"SDL_WINd",
				"SDL_Window	Typedef"
			],
			[
				"At",
				"AttachFormatter(ri::Formatter *formatter)	void"
			],
			[
				"Def",
				"DefaultFormatter	Typedef"
			],
			[
				"Forma",
				"Formatter	class"
			],
			[
				"prii",
				"printf(const char *restrict __format, ...)	int"
			],
			[
				"insert",
				"insert(Node *x, int left, int right, int value)	void"
			],
			[
				"rig",
				"rightchild	Node *"
			],
			[
				"left",
				"leftchild	Node *"
			],
			[
				"right",
				"rightchild	Node *"
			],
			[
				"r",
				"rightresult	int"
			],
			[
				"righ",
				"rightchild	Node *"
			],
			[
				"memor",
				"memory_usage	int"
			],
			[
				"memo",
				"memory_usage	int"
			],
			[
				"whi",
				"which	int"
			],
			[
				"topol",
				"topoLevel	vector<int> [100010]"
			],
			[
				"sort",
				"sort(__wrap_iter<_Tp *> __first, __wrap_iter<_Tp *> __last, _Compare __comp)	void"
			],
			[
				"topo",
				"topo	vector<int>"
			],
			[
				"incl",
				"include	#include system"
			],
			[
				"scc",
				"sccCount	int"
			],
			[
				"siz",
				"size	int [10010]"
			],
			[
				"count",
				"count(__bit_iterator<_Cp, _IsConst> __first, __bit_iterator<_Cp, _IsConst> __last, const _Tp &__value_)	typename __bit_iterator<_Cp, _IsConst>::difference_type"
			],
			[
				"edge",
				"edgeCnt	int"
			],
			[
				"INTM",
				"INT_MAX	Macro"
			],
			[
				"res",
				"resize(size_type __sz, const_reference __x)	void"
			],
			[
				"INF",
				"INFTY	Macro"
			],
			[
				"sq",
				"sqrt(_A1 __x)	typename enable_if<is_integral<_A1>::value, double>::type"
			],
			[
				"pop",
				"pop_front()	void"
			],
			[
				"edg",
				"edges	Edge [20010]"
			],
			[
				"edges",
				"edges_ptr	Edge *[20010]"
			],
			[
				"def",
				"define	#define"
			],
			[
				"to",
				"ToString() const	std::string"
			],
			[
				"BU",
				"BuildTree(const Rectangle range)	Node *"
			],
			[
				"node",
				"Node"
			],
			[
				"makes",
				"make_set()	void"
			],
			[
				"li",
				"limit	int"
			],
			[
				"iterato",
				"iterator_t	Typedef"
			],
			[
				"gene",
				"generate_scc(int x, int id)	void"
			],
			[
				"Shad",
				"ShaderType"
			],
			[
				"_",
				"__private_gl_error"
			],
			[
				"in",
				"include	#include system"
			],
			[
				"type",
				"type	const ne::raw::ShaderType"
			],
			[
				"usin",
				"using namespace	using-namespace"
			],
			[
				"Shader",
				"Shader.hpp"
			],
			[
				"NONCO",
				"NONCOPYABLE(className)	Macro"
			],
			[
				"GLGEOSHA",
				"GL_GEOMETRY_SHADER	Macro"
			],
			[
				"GLVERSHAR",
				"GL_VERTEX_SHADER	Macro"
			],
			[
				"SDLGL_SETA",
				"SDL_GL_SetAttribute(SDL_GLattr attr, int value)	int"
			],
			[
				"SDL_GL_Set",
				"SDL_GL_SetAttribute(SDL_GLattr attr, int value)	int"
			],
			[
				"SDLEve",
				"SDLEventManager	class"
			],
			[
				"SDLEVE",
				"SDLEventType"
			],
			[
				"Uint",
				"Uint32	Typedef"
			]
		]
	},
	"buffers":
	[
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 400.0,
		"last_filter": "ena",
		"selected_items":
		[
			[
				"ena",
				"Package Control: Enable Package"
			],
			[
				"listpa",
				"Package Control: List Packages"
			],
			[
				"dis",
				"Package Control: Disable Package"
			],
			[
				"list",
				"Package Control: List Packages"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"mark",
				"Set Syntax: Markdown"
			],
			[
				"c++11",
				"Set Syntax: C++11"
			],
			[
				"error",
				"Set Syntax: ClangErrorPanel"
			],
			[
				"math",
				"Set Syntax: TeX Math"
			],
			[
				"user",
				"Preferences: Settings - User"
			],
			[
				"lis",
				"Package Control: List Packages"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"tabs",
				"View: Toggle Tabs"
			],
			[
				"ssc",
				"Set Syntax: C++11"
			],
			[
				"ssc++",
				"Set Syntax: C++11"
			],
			[
				"openf",
				"View: Toggle Open Files in Side Bar"
			],
			[
				"package",
				"Package Control: Remove Channel"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"key",
				"Preferences: Key Bindings - User"
			],
			[
				"preuser",
				"Preferences: Settings - User"
			]
		],
		"width": 536.0
	},
	"console":
	{
		"height": 139.0,
		"history":
		[
			"import urllib.request,os; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ','%20')).read())"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/riteme/Code/chinese-chess",
		"/home/riteme/Code/chinese-chess/backend"
	],
	"file_history":
	[
		"/home/riteme/Code/chinese-chess/backend/thirdparty/riteme-logging/Formatter.cpp",
		"/home/riteme/Code/chinese-chess/backend/thirdparty/riteme-logging/Formatter.hpp",
		"/home/riteme/Code/chinese-chess/backend/thirdparty/LogSystem.hpp",
		"/home/riteme/Code/chinese-chess/backend/thirdparty/LogSystem.cpp",
		"/home/riteme/Code/chinese-chess/.gitignore",
		"/home/riteme/Code/chinese-chess/backend/thirdparty/riteme-logging/FormatConfig.hpp",
		"/home/riteme/Code/chinese-chess/src",
		"/home/riteme/Code/ne2d/ne2d/Renderer.cpp",
		"/home/riteme/Code/test/oi/Code/self/flow-network-24/17/trans.cpp",
		"/home/riteme/Code/test/oi/Resources/status-reports/next.md",
		"/home/riteme/Code/test/oi/Resources/status-reports/2016-2-2.md",
		"/home/riteme/Code/test/oi/Code/self/flow-network-24/6/alis.cpp",
		"/home/riteme/Code/test/oi/Code/self/flow-network-24/18/job.cpp",
		"/home/riteme/Code/test/oi/Code/self/flow-network-24/11/airl.cpp",
		"/home/riteme/Code/test/oi/Code/self/flow-network-24/10/napk.cpp",
		"/home/riteme/Documents/solution.txt",
		"/home/riteme/Documents/napk.cpp",
		"/home/riteme/Code/test/oi/Resources/status-reports/2016-2-1.md",
		"/home/riteme/Documents/notice.txt",
		"/home/riteme/Code/test/oi/Resources/status-reports/2016-1-30.md",
		"/home/riteme/Code/test/oi/Code/poj/P2135/FarmTour.cpp",
		"/home/riteme/Code/test/oi/Code/self/flow-network-24/7/data.cpp",
		"/home/riteme/Code/test/oi/Code/self/flow-network-24/3/path.cpp",
		"/home/riteme/Code/judge.py/path.out",
		"/home/riteme/Code/test/oi/Code/self/flow-network-24/5/table.cpp",
		"/home/riteme/Code/test/oi/Code/self/flow-network-24/1/air.cpp",
		"/home/riteme/Code/test/oi/Resources/status-reports/2016-1-26.md",
		"/home/riteme/Code/test/oi/Code/self/simple-network-flow/dinic.cpp",
		"/home/riteme/Code/test/oi/Resources/test/Happy Round #4/run.py",
		"/home/riteme/Code/test/oi/Resources/test/Happy Round #4/campus.cpp",
		"/home/riteme/Code/test/oi/Resources/test/Happy Round #4/final/train-2.cpp",
		"/home/riteme/Code/test/oi/Resources/test/Happy Round #4/train.cpp",
		"/home/riteme/Code/test/oi/Resources/test/Happy Round #4/judge.py",
		"/home/riteme/Code/test/oi/Resources/test/Happy Round #4/final/campus.cpp",
		"/home/riteme/Code/test/oi/Resources/test/Happy Round #4/robot.cpp",
		"/home/riteme/Code/test/tplink.cpp",
		"/home/riteme/Code/test/oi/Resources/test/Happy Round #4/campus.out",
		"/home/riteme/Code/test/project/learn-opengl-3/framework.hpp",
		"/home/riteme/Code/test/project/learn-opengl-3/framework.cpp",
		"/home/riteme/Code/test/project/learn-opengl-3/vertex.vert",
		"/home/riteme/Code/test/project/learn-opengl-3/fragment.frag",
		"/home/riteme/Code/test/project/learn-opengl-3/main.cpp",
		"/home/riteme/Code/test/oi/Code/poj/P2481/Cows.cpp",
		"/home/riteme/Code/test/oi/Code/vijos/P1514/RMQ.cpp",
		"/home/riteme/Code/test/oi/Code/poj/P2186/PopularCows.cpp",
		"/home/riteme/Code/test/oi/Code/vijos/P1790/main.cpp",
		"/home/riteme/Code/test/oi/Code/poj/P1236/NetworkOfSchools.cpp",
		"/home/riteme/Code/test/oi/Code/algs/Graph/SimpleTarjanSCC.cpp",
		"/home/riteme/Code/test/oi/Resources/status-reports/2016-1-25.md",
		"/home/riteme/Code/test/oi/Code/poj/P2367/GenealogicalTree.cpp",
		"/home/riteme/Code/test/oi/Code/algs/Graph/StronglyConnectedComponent.cpp",
		"/home/riteme/Code/test/oi/Resources/status-reports/2016-1-24.md",
		"/home/riteme/Code/test/oi/Code/poj/P2253/Frogger-BinarySearch-UF.cpp",
		"/home/riteme/Code/test/oi/Code/poj/P2253/Frogger-DP.cpp",
		"/home/riteme/Code/test/oi/Code/vijos/P1155/main.cpp",
		"/home/riteme/Code/test/oi/Code/vijos/P1053/main.cpp",
		"/home/riteme/Code/test/oi/Code/vijos/P1046/main.cpp",
		"/home/riteme/Code/test/oi/Code/poj/P2377/BadCowtractors.cpp",
		"/home/riteme/Code/test/oi/Code/algs/Tree/2D-Segment-Tree/2D-Segment-Tree.cpp",
		"/home/riteme/Code/test/oi/Code/vijos/P1234/main.cpp",
		"/home/riteme/Code/test/oi/Code/vijos/P1579/main.cpp",
		"/home/riteme/Code/test/oi/Code/tsinsen/P1066/main.cpp",
		"/home/riteme/Code/test/oi/Code/tsinsen/P1066",
		"/home/riteme/Code/test/oi/Code/poj/P2155/Matrix.cpp",
		"/home/riteme/Code/test/oi/Code/vijos/P1190/main.cpp",
		"/home/riteme/Code/test/oi/Code/vijos/P1045/main.cpp",
		"/home/riteme/.config/sublime-text-3/Packages/User/clang_format_custom.sublime-settings",
		"/home/riteme/Code/test/oi/Code/vijos/P1531/main.cpp",
		"/home/riteme/.config/sublime-text-3/Packages/Clang Format/clang_format_custom.sublime-settings",
		"/home/riteme/Code/test/oi/Code/vijos/P1626/main.cpp",
		"/home/riteme/Code/test/oi/Code/poj/P2828/BuyTickets.cpp",
		"/home/riteme/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
		"/home/riteme/.config/sublime-text-3/Packages/Default/Preferences.sublime-settings",
		"/home/riteme/Code/ne2d/ne2d/raw/ShaderType.hpp",
		"/home/riteme/Code/ne2d/ne2d/raw/OpenGL.hpp",
		"/home/riteme/Code/ne2d/ne2d/raw/Shader.cpp",
		"/home/riteme/Code/ne2d/ne2d/TypeConfiguration.hpp",
		"/home/riteme/Code/ne2d/ne2d/ClassAttribute.hpp",
		"/home/riteme/Code/ne2d/README.md",
		"/home/riteme/Code/ne2d/ne2d/raw/Shader.hpp",
		"/home/riteme/Code/ne2d/ne2d/raw/SDL.cpp",
		"/home/riteme/Code/ne2d/ne2d/raw/SDL.hpp",
		"/home/riteme/Code/ne2d/ne2d/raw/SDLEventType.hpp",
		"/home/riteme/Code/ne2d/ne2d/raw/SDLMouseWheelEventArgs.hpp",
		"/home/riteme/Code/ne2d/ne2d/raw/SDLEventManager.hpp",
		"/home/riteme/Code/ne2d/ne2d/raw/SDLKeyState.hpp",
		"/home/riteme/Code/ne2d/ne2d/raw/SDLMouseState.hpp",
		"/home/riteme/Code/ne2d/ne2d/raw/SDLEventArgs.hpp",
		"/home/riteme/Code/ne2d/ne2d/raw/SDLEventManager.cpp",
		"/home/riteme/Code/ne2d/ne2d/raw/ISDLEventArgs.hpp",
		"/home/riteme/Code/ne2d/ne2d/raw/SDLWindowLeaveEventArgs.cpp",
		"/home/riteme/Code/ne2d/ne2d/raw/SDLWindowLeaveEventArgs.hpp",
		"/home/riteme/Code/ne2d/ne2d/raw/SDLKeyboardEventArgs.cpp",
		"/home/riteme/Code/ne2d/ne2d/raw/SDLQuitEventArgs.cpp",
		"/home/riteme/Code/ne2d/ne2d/raw/SDLMouseWheelEventArgs.cpp",
		"/home/riteme/Code/ne2d/ne2d/raw/SDLMouseButtonEventArgs.cpp",
		"/home/riteme/Code/ne2d/ne2d/raw/SDLMouseMotionEventArgs.cpp",
		"/home/riteme/Code/ne2d/ne2d/raw/SDLWindowCloseEventArgs.cpp",
		"/home/riteme/Code/ne2d/ne2d/raw/SDLWindowEnterEventArgs.cpp",
		"/home/riteme/Code/ne2d/ne2d/raw/SDLWindowMovedEventArgs.cpp",
		"/home/riteme/Code/ne2d/ne2d/raw/SDLWindowShownEventArgs.cpp",
		"/home/riteme/Code/ne2d/ne2d/raw/SDLWindowHiddenEventArgs.cpp",
		"/home/riteme/Code/ne2d/ne2d/raw/SDLWindowExposedEventArgs.cpp",
		"/home/riteme/Code/ne2d/ne2d/raw/SDLWindowResizedEventArgs.cpp",
		"/home/riteme/Code/ne2d/ne2d/raw/SDLWindowRestoredEventArgs.cpp",
		"/home/riteme/Code/ne2d/ne2d/raw/SDLWindowMaximizedEventArgs.cpp",
		"/home/riteme/Code/ne2d/ne2d/raw/SDLWindowMinimizedEventArgs.cpp",
		"/home/riteme/Code/ne2d/ne2d/raw/SDLWindowFocusLostEventArgs.cpp",
		"/home/riteme/Code/ne2d/ne2d/raw/SDLWindowFocusGainedEventArgs.cpp",
		"/home/riteme/Code/ne2d/ne2d/raw/SDLWindowSizeChangedEventArgs.cpp",
		"/home/riteme/Code/ne2d/unittest/test_SDLWindow.cpp",
		"/home/riteme/Code/ne2d/ne2d/raw/SDLKeyboardEventArgs.hpp",
		"/home/riteme/Code/ne2d/ne2d/raw/SDLMouseButtonEventArgs.hpp",
		"/home/riteme/Code/ne2d/ne2d/raw/SDLMouseMotionEventArgs.hpp",
		"/home/riteme/Code/ne2d/ne2d/raw/ISDLEventArgs.cpp",
		"/home/riteme/Code/ne2d/ne2d/raw/SDLWindow.cpp",
		"/home/riteme/Code/ne2d/ne2d/raw/SDLWindow.hpp",
		"/home/riteme/Code/ne2d/ne2d/raw/SDLMouseClicks.hpp",
		"/home/riteme/Code/ne2d/ne2d/raw/SDLMouseButton.hpp",
		"/home/riteme/Code/ne2d/ne2d/raw/SDLQuitEventArgs.hpp",
		"/home/riteme/Code/ne2d/ne2d/raw/SDLKeycode.hpp",
		"/home/riteme/Code/ne2d/ne2d/raw/SDLWindowHiddenEventArgs.hpp",
		"/home/riteme/Code/ne2d/ne2d/raw/SDLWindowExposedEventArgs.hpp",
		"/home/riteme/Code/ne2d/ne2d/raw/SDLWindowSizeChangedEventArgs.hpp",
		"/home/riteme/Code/ne2d/ne2d/raw/SDLWindowResizedEventArgs.hpp",
		"/home/riteme/Code/ne2d/ne2d/raw/SDLWindowMovedEventArgs.hpp",
		"/home/riteme/Code/ne2d/ne2d/raw/SDLWindowFocusLostEventArgs.hpp",
		"/home/riteme/Code/ne2d/ne2d/raw/SDLWindowFocusGainedEventArgs.hpp"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 103.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"frontend",
			";",
			"lhs",
			"job",
			"y",
			"G",
			"mygreater",
			"retur",
			"friend",
			"thread_local",
			"reverse",
			"void",
			"static",
			"ecost",
			"%d",
			"d",
			"const",
			"%d",
			"e->cost",
			"float",
			"int",
			"INT",
			"int",
			"const",
			"fast",
			"const",
			"nfast",
			"friend",
			"flow",
			"fore",
			"int",
			"void",
			"using",
			"ion",
			"Edge",
			"edge_to",
			"capacity",
			"re1",
			"e1",
			"1",
			"print_answ",
			"path",
			"next",
			"edge",
			"previous",
			"prev",
			"add_pointer",
			"friend",
			"mian",
			"static",
			"friend",
			"air",
			"stdout",
			"0",
			"W",
			"0",
			"v",
			"u",
			"W",
			"w",
			"cnt",
			"int",
			"and",
			"n",
			"assert",
			"dsit",
			"i",
			"index",
			"Edge",
			"\\b3\\b",
			"\\b2\\b",
			"\\b1\\b",
			"\\b2\\b",
			"unordered_map",
			"less",
			"size_typ",
			"2",
			"0",
			"friend",
			"dist",
			"i",
			"INFTY",
			".",
			"<",
			"Incorrect length",
			"raw_input",
			"input",
			"NOde",
			"origin",
			"LOGN",
			"total_passed",
			"raise",
			"continue",
			"index",
			"Flase",
			"reur",
			"format",
			"pair",
			"rais",
			"flag",
			"status",
			"shutil",
			"import",
			"outfile",
			"infile",
			"assed",
			"max_align_t",
			"\\b\\d\\d milliseconds\\b",
			"const",
			"index",
			"glDrawBuffers",
			"glEnaVert",
			"glEnaVerp",
			"nullptr",
			"glBindBuffer",
			"glLinkProgram",
			"protected",
			"program",
			"GLulong",
			"info",
			"Info",
			"Debug",
			"Glin",
			"shaderType",
			"eofbit",
			"fstream",
			"shader",
			"point"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"%lld"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
			]
		},
		{
			"sheets":
			[
			]
		}
	],
	"incremental_find":
	{
		"height": 29.0
	},
	"input":
	{
		"height": 34.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.cc":
	{
		"height": 134.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "chinese-chess.sublime-project",
	"replace":
	{
		"height": 54.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"backend/thirdparty/riteme-logging/FormatConfig.hpp"
			],
			[
				"for",
				"backend/thirdparty/riteme-logging/Formatter.cpp"
			],
			[
				"form",
				"backend/thirdparty/riteme-logging/Formatter.hpp"
			],
			[
				"forma",
				"backend/thirdparty/riteme-logging/FormatConfig.hpp"
			],
			[
				"rendercp",
				"ne2d/Renderer.cpp"
			],
			[
				"rencp",
				"ne2d/Renderer.cpp"
			],
			[
				"rendh",
				"ne2d/Renderer.hpp"
			],
			[
				"renderc",
				"ne2d/Renderer.cpp"
			],
			[
				"image",
				"ne2d/Image.cpp"
			],
			[
				"colorcpp",
				"ne2d/Color.cpp"
			],
			[
				"color",
				"ne2d/Color.hpp"
			],
			[
				"next",
				"oi/Resources/status-reports/next.md"
			],
			[
				"netx",
				"oi/Resources/status-reports/next.md"
			],
			[
				"ne",
				"oi/Resources/status-reports/next.md"
			],
			[
				"jud",
				"oi/Resources/test/Happy Round #4/judge.py"
			],
			[
				"nex",
				"oi/Resources/status-reports/next.md"
			],
			[
				"p1053",
				"oi/Code/vijos/P1053/main.cpp"
			],
			[
				"badc",
				"oi/Code/poj/P2377/BadCowtractors.cpp"
			],
			[
				"net",
				"oi/Resources/status-reports/next.md"
			],
			[
				"shader",
				"ne2d/raw/Shader.cpp"
			],
			[
				"args.cpp",
				"ne2d/raw/SDLWindowSizeChangedEventArgs.cpp"
			],
			[
				"eventargs.cpp",
				"ne2d/raw/SDLQuitEventArgs.cpp"
			],
			[
				"mouses",
				"ne2d/raw/SDLMouseState.hpp"
			],
			[
				"conf",
				"unittest/conf.py"
			],
			[
				"run",
				"unittest/run.py"
			],
			[
				"math",
				"src/math/Math.hpp"
			],
			[
				"bui",
				"build.py"
			],
			[
				"proj",
				"proj_conf.py"
			],
			[
				"sdlinit",
				"src/raw/SDLInitFlags.hpp"
			],
			[
				"sdl",
				"src/raw/SDL.cpp"
			],
			[
				"sdlwind",
				"src/raw/SDLWindow.cpp"
			],
			[
				"tes",
				"unittest/test_SDLWindow.cpp"
			],
			[
				"sdlint",
				"src/raw/SDLInitFlags.hpp"
			],
			[
				"testsldw",
				"unittest/test_SDLWindow.cpp"
			],
			[
				"sdlexce",
				"src/raw/SDLException.cpp"
			],
			[
				"poj",
				"proj_conf.py"
			],
			[
				"inter",
				"src/Interface.hpp"
			],
			[
				"b",
				"build.py"
			],
			[
				"check",
				"check.py"
			],
			[
				"sdlw",
				"src/raw/SDLWindow.cpp"
			],
			[
				"sdlwin",
				"src/raw/SDLWindow.cpp"
			],
			[
				"matr",
				"src/math/Matrix3.hpp"
			],
			[
				"type",
				"src/TypeConfiguration.hpp"
			],
			[
				"vec",
				"src/math/Vector2D.hpp"
			],
			[
				"maht",
				"src/math/Math.cpp"
			],
			[
				"matri",
				"src/math/Matrix3.hpp"
			],
			[
				"rea",
				"README.md"
			],
			[
				"test.hpp",
				"unittest/test.hpp"
			],
			[
				"float",
				"src/utility/FloatComparison.hpp"
			],
			[
				"floa",
				"src/utility/FloatComparison.hpp"
			],
			[
				"testm",
				"unittest/test_Matrix3.cpp"
			],
			[
				"test",
				"unittest/test_FloatComparison.cpp"
			],
			[
				"matrix",
				"src/math/Matrix3.cpp"
			],
			[
				"mat",
				"src/math/Math.cpp"
			],
			[
				"test_mat",
				"unittest/test_Matrix3.cpp"
			],
			[
				"test_vec",
				"unittest/test_Vector2D.cpp"
			],
			[
				"amtr",
				"src/math/Matrix3.hpp"
			],
			[
				"cpp",
				"src/math/Matrix3.cpp"
			],
			[
				"rec",
				"src/math/Rectangle.hpp"
			],
			[
				"rect",
				"src/math/Rectangle.hpp"
			],
			[
				"test_matr",
				"unittest/test_Matrix3.cpp"
			],
			[
				"test_rec",
				"unittest/test_Rectangle.cpp"
			],
			[
				"run.",
				"unittest/run.py"
			],
			[
				"clas",
				"src/ClassAttribute.hpp"
			],
			[
				"ve",
				"src/Vector2D.hpp"
			],
			[
				"fl",
				"src/FloatComparison.hpp"
			],
			[
				"cla",
				"src/ClassAttribute.hpp"
			],
			[
				"vect",
				"src/Vector2D.hpp"
			],
			[
				"rectna",
				"src/Rectangle.hpp"
			],
			[
				"stringf",
				"src/StringFormat.hpp"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Code/ne2d/ne2d.sublime-project"
			],
			[
				"test",
				"~/Code/test/test.sublime-project"
			],
			[
				"ne2d",
				"~/Code/ne2d/ne2d.sublime-project"
			],
			[
				"rte",
				"~/Code/riteme.github.io/riteme.github.io.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": false,
	"side_bar_visible": true,
	"side_bar_width": 250.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
